<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-06-13T10:35:13+02:00</updated><id>/feed.xml</id><title type="html">Rocket.Chat</title><subtitle>Proyecto sobre Rocket.Chat para el curso de ASIR en el IES Gonzalo Nazareno</subtitle><entry><title type="html">Proxy inverso y Rocket.Chat</title><link href="/blog/proxy-post" rel="alternate" type="text/html" title="Proxy inverso y Rocket.Chat" /><published>2021-05-15T00:00:00+02:00</published><updated>2021-05-15T00:00:00+02:00</updated><id>/blog/proxy-post</id><content type="html" xml:base="/blog/proxy-post">&lt;p&gt;Existen varias formas de implementar un proxy inverso para Rocket.Chat. Veremos algunas, de las 
más interesantes, y después veremos como implementarlo en nuestro proyecto.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La primera forma que nos encontramos es configurar un proxy inverso con NGinx.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En primer lugar, debemos tener instalado el siguiente paquete:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Después, añadiremos nuestra clave privada dentro del directorio &lt;em&gt;/etc/nginx/certificate.key&lt;/em&gt;.
Configuramos también los permisos de dicho fichero:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 400 /etc/nginx/certificate.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Después añadimos a la misma ubicación, nuestro certificado. Editaremos el fichero
&lt;em&gt;/etc/nginx/sites-enabled/default&lt;/em&gt; o si estamos usando nginx desde Docker, &lt;em&gt;/etc/nginx/conf.d/default.conf&lt;/em&gt;
y nos aseguramos de usar nuestro hostname en lugar de hostname de ejemplo que viene a continuación:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Upstreams
upstream backend {
    server 127.0.0.1:3000;
}

# HTTPS Server
server {
    listen 443;
    server_name your_hostname.com;

    # You can increase the limit if your need to.
    client_max_body_size 200M;

    error_log /var/log/nginx/rocketchat.access.log;

    ssl on;
    ssl_certificate /etc/nginx/certificate.crt;
    ssl_certificate_key /etc/nginx/certificate.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don’t use SSLv3 ref: POODLE

    location / {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;upgrade&quot;;
        proxy_set_header Host $http_host;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Nginx-Proxy true;

        proxy_redirect off;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Por último, solo nos quedaría el reiniciar el servicio de NGinx.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Otro sistema para realizar Proxy inverso es Plesk Onyx con un Nginx.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plesk Onyx dispone actualmente de una instalación con Docker y un generador de reglas Docker para proxy
con Nginx dentro del mismo. Debemos deshabilitar dicha opción puesto que no permite añadir directorios
personalizados.&lt;/p&gt;

&lt;p&gt;Debemos a su vez, añadir manualmente las reglas en la zona de directorios adicionales de NGinx, quedando
algo así:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#manual extension docker with socket upgrade begin
location ~ ^/.* {
    proxy_pass http://0.0.0.0:3000;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection &quot;upgrade&quot;;
    proxy_set_header X-Forwarded-Proto http;
    proxy_set_header X-Nginx-Proxy true;
    proxy_http_version 1.1;

    proxy_redirect off;
}

#extension docker end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por último, disponemos del Proxy inverso realizado con Apache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En primer lugar, debemos ejecutar los siguientes comandos como root:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get update
apt-get install apache2
a2enmod proxy_http
a2enmod proxy
a2enmod ssl
a2enmod proxy_wstunnel
a2enmod rewrite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Esto instalará apache2 y activará el módulo del proxy entre otras cosas.
Después de realizar estos comandos, vamos a realizar el mismo procedimiento seguido en el Proxy inverso
con NGinx:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Añadimos la clave privada a la ubicación &lt;em&gt;/etc/ssl/private/chat.domain.com.key&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/user3.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'dockercompose-post'; return false&quot;&gt;&amp;lt; Instalación mediante Docker-compose&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'admin-post'; return false&quot;&gt;Opciones de administrador &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Proxy" /><category term="Connections" /><category term="Rocket.Chat" /><category term="App" /><category term="Certificate" /><summary type="html">Existen varias formas de implementar un proxy inverso para Rocket.Chat. Veremos algunas, de las más interesantes, y después veremos como implementarlo en nuestro proyecto. La primera forma que nos encontramos es configurar un proxy inverso con NGinx. En primer lugar, debemos tener instalado el siguiente paquete: sudo apt-get install nginx Después, añadiremos nuestra clave privada dentro del directorio /etc/nginx/certificate.key. Configuramos también los permisos de dicho fichero: chmod 400 /etc/nginx/certificate.key Después añadimos a la misma ubicación, nuestro certificado. Editaremos el fichero /etc/nginx/sites-enabled/default o si estamos usando nginx desde Docker, /etc/nginx/conf.d/default.conf y nos aseguramos de usar nuestro hostname en lugar de hostname de ejemplo que viene a continuación: # Upstreams upstream backend { server 127.0.0.1:3000; } # HTTPS Server server { listen 443; server_name your_hostname.com; # You can increase the limit if your need to. client_max_body_size 200M; error_log /var/log/nginx/rocketchat.access.log; ssl on; ssl_certificate /etc/nginx/certificate.crt; ssl_certificate_key /etc/nginx/certificate.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # don’t use SSLv3 ref: POODLE location / { proxy_pass http://backend; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; proxy_set_header X-Nginx-Proxy true; proxy_redirect off; } } Por último, solo nos quedaría el reiniciar el servicio de NGinx. Otro sistema para realizar Proxy inverso es Plesk Onyx con un Nginx. Plesk Onyx dispone actualmente de una instalación con Docker y un generador de reglas Docker para proxy con Nginx dentro del mismo. Debemos deshabilitar dicha opción puesto que no permite añadir directorios personalizados. Debemos a su vez, añadir manualmente las reglas en la zona de directorios adicionales de NGinx, quedando algo así: #manual extension docker with socket upgrade begin location ~ ^/.* { proxy_pass http://0.0.0.0:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header X-Forwarded-Proto http; proxy_set_header X-Nginx-Proxy true; proxy_http_version 1.1; proxy_redirect off; } #extension docker end Por último, disponemos del Proxy inverso realizado con Apache En primer lugar, debemos ejecutar los siguientes comandos como root: apt-get update apt-get install apache2 a2enmod proxy_http a2enmod proxy a2enmod ssl a2enmod proxy_wstunnel a2enmod rewrite Esto instalará apache2 y activará el módulo del proxy entre otras cosas. Después de realizar estos comandos, vamos a realizar el mismo procedimiento seguido en el Proxy inverso con NGinx: Añadimos la clave privada a la ubicación /etc/ssl/private/chat.domain.com.key &amp;lt; Instalación mediante Docker-compose Opciones de administrador &amp;gt;</summary></entry><entry><title type="html">Cumplimiento de Rocket.Chat</title><link href="/blog/certificate-post" rel="alternate" type="text/html" title="Cumplimiento de Rocket.Chat" /><published>2021-05-11T00:00:00+02:00</published><updated>2021-05-11T00:00:00+02:00</updated><id>/blog/certificate-post</id><content type="html" xml:base="/blog/certificate-post">&lt;p&gt;Rocket.Chat cumple con los recursos necesarios para con los estándares de la industria, así como
de cumplir con las regulaciones oportunas y buena praxis.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ISO 27001 certification&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;&lt;/div&gt;

&lt;p&gt;Es un estándar internacional reconocido para la gestión de seguridad de la información.
Rocket.Chat es auditada anualmente por un auditor externo independiente para verificar el diseño
y efectividad operativa del sistema de gestión.&lt;/p&gt;

&lt;p&gt;El certificado puedes encontrarlo &lt;a href=&quot;https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-M418Ul0aSTwf2PYsyPW%2F-MDtXV36JZ1zcOI-4hhI%2F-MDtlBAVE2fi6vshtNJL%2FCertificate%202020.pdf?alt=media&amp;amp;token=f105048d-5843-405d-8b09-5b5b8fed9e7c&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cloud Security Alliance (CSA)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rocket.Chat, publicó un cuestionario en el registro STAR de la CSA. La CSA es la primera organización 
en la estandarización y mejora de la seguridad en cloud-computing.&lt;/p&gt;

&lt;p&gt;Puedes encontrar esta información &lt;a href=&quot;https://cloudsecurityalliance.org/star/registry/rocket-chat&quot;&gt;aquí&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'ldap-post'; return false&quot;&gt;&amp;lt; Configuración LDAP&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'admin-post'; return false&quot;&gt;Opciones de administrador &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Certificates" /><category term="Compliance" /><category term="Rocket.Chat" /><category term="Resources" /><summary type="html">Rocket.Chat cumple con los recursos necesarios para con los estándares de la industria, así como de cumplir con las regulaciones oportunas y buena praxis. ISO 27001 certification Es un estándar internacional reconocido para la gestión de seguridad de la información. Rocket.Chat es auditada anualmente por un auditor externo independiente para verificar el diseño y efectividad operativa del sistema de gestión. El certificado puedes encontrarlo aquí. Cloud Security Alliance (CSA) Rocket.Chat, publicó un cuestionario en el registro STAR de la CSA. La CSA es la primera organización en la estandarización y mejora de la seguridad en cloud-computing. Puedes encontrar esta información aquí &amp;lt; Configuración LDAP Opciones de administrador &amp;gt;</summary></entry><entry><title type="html">Configuración de LDAP</title><link href="/blog/ldap-post" rel="alternate" type="text/html" title="Configuración de LDAP" /><published>2021-05-06T00:00:00+02:00</published><updated>2021-05-06T00:00:00+02:00</updated><id>/blog/ldap-post</id><content type="html" xml:base="/blog/ldap-post">&lt;p&gt;Rocket.Chat, como hemos comentado anteriormente, permite que los usuarios se autentiquen para entrar al
servidor mediante LDAP.&lt;/p&gt;

&lt;p&gt;Podemos acceder a la configuración de LDAP de la siguiente manera:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Accedemos al servidor como accedemos normalmente.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;En la siguiente ventana, pinchar en el icono de la parte superior izquierda, y acceder a la opción
de Administración.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap1.png&quot; width=&quot;1000&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Una vez ahí, se nos desplegará un listado con varias opciones. Nos tendremos que ir a la sección de
Configuración y, para que sea más sencillo, poner en el buscador “LDAP” y acceder:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap2.png&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A continuación, se nos desplegará las opciones de las que dispone LDAP. Nosotros seleccionaremos las
siguientes opciones para nuestro uso personal:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Habilitar&lt;/strong&gt; –&amp;gt; ON&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Debemos seleccionar esta opción para que podamos utilizar LDAP&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Login Fallback&lt;/strong&gt; –&amp;gt; OFF&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;En nuestro caso, no lo vamos a seleccionar por ahora, ya que en principio queremos que todos los
  inicios de sesión sean mediante LDAP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Encontrar usuario después de iniciar sesión&lt;/strong&gt; –&amp;gt; ON&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Garantiza que se realizó correctamente la búsqueda del DN del usuario después de la vinculación.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Servidor&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;En el cuadro de texto, debemos incorporar o el nombre del servidor LDAP o su dirección IP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Puerto&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Puerto para acceder a nuestro servidor LDAP&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Vuelva a conectar&lt;/strong&gt; –&amp;gt; ON&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Cuando la conexión se vea interrumpida, permite intentar conectarse automáticamente de nuevo.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Cifrado&lt;/strong&gt; –&amp;gt; deshabilitado&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;En nuestro caso, como no lo tenemos configurado no pondremos ningún cifrado, pero en el caso
  del instituto, usaremos SSL/LDAPS.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;CA Cert / Rechazar no autorizada&lt;/strong&gt; –&amp;gt; OFF&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Puesto que no vamos a utilizar cifrado, estas opciones están desactivadas.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Base DN&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;El nombre distinguido completamente calificado de un subárbol LDAP donde quieras buscar 
  usuarios y grupos.&lt;/p&gt;

    &lt;p&gt;En nuestro caso, hemos creado un servidor LDAP con unos datos de prueba, así que usaremos 
  el siguiente:&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap3.png&quot; width=&quot;600&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Nivel de Registro interno&lt;/strong&gt; –&amp;gt; Deshabilitado&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A partir de aquí, ya se podría comprobar la conexión con el botón de color azul. También, en cualquier
caso, podemos restablecer la configuración de esta sección.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap4.png&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ahora pasaremos inmediatamente a configurar la sección llamada &lt;em&gt;Autenticación&lt;/em&gt;, que es la otra parte 
importante para configurar LDAP. En ella, nos encontramos las siguientes opciones:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Habilitar&lt;/strong&gt; –&amp;gt; ON&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Habilitamos la autenticación de LDAP&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;DN de usuario&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;El usuario usado para realizar las búsquedas de usuarios y para autenticarlos. Usualmente,
  se utiliza el administrador del servidor LDAP.&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap5.png&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Contraseña&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;La contraseña LDAP usada para el administrador anteriormente puesto.
  &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Terminada esta sección, pasaremos a la siguiente, &lt;em&gt;Sincronizar/Importar&lt;/em&gt;. Esta sección nos permitirá
configurar la búsqueda de usuarios y la posterior incorporación como usuarios en nuestro servidor 
Rocket.Chat. Esta sección dispone de las siguientes opciones:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Campo de Nombre&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;El campo utilizado como Nombre de usuario en Rocket.Chat para los nuevos usuarios. Si 
  este campo se deja en blanco, se usará el nombre de usuario informado en la página de inicio
  de sesión.&lt;/p&gt;

    &lt;p&gt;En nuestro caso, hemos utilizado el campo LDAP “givenName”.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Campo Identificador Único&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;El campo que se utilizará para vincular al usuario LDAP y el usuario Rocket.Chat. Dejar el valor
  por defecto.&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap6.png&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Dominio Predeterminado&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Se usa para crear un correo electrónico exclusivo para los usuarios donde el correo electrónico
  no se haya implementado mediante LDAP. Nosotros usaremos el siguiente:&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap7.png&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Fusionar usuarios existentes&lt;/strong&gt; –&amp;gt; ON&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Sincronizar Datos de Usuario&lt;/strong&gt; –&amp;gt; ON&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Mantiene los datos del usuario en sincronía con el servidor al iniciar sesión.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Mapa de Campos de Datos de Usuario&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Configura los campos de usuario del servidor Rocket.Chat, poblándolos con los datos de los
  registros LDAP. Los únicos campos que están disponibles en Rocket.Chat son: name, email y
  customFields.&lt;/p&gt;

    &lt;p&gt;Nosotros lo hemos configurado de la siguiente forma:&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap8.png&quot; width=&quot;600&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Sincronizar grupos de LDAP&lt;/strong&gt; –&amp;gt; ON&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Eliminar automáticamente roles de usuario&lt;/strong&gt; –&amp;gt; OFF&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Se eliminan los roles de Rocket.Chat para implementar roles según los asignados en el servidor
  LDAP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Filtro de grupo de usuarios&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Filtro usado para verificar que un usuario pertenece a un grupo. Dejar el valor por defecto:&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap9.png&quot; width=&quot;600&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Base DN de grupos LDAP&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;DN base utilizado para buscar usuarios. En nuestro caso, no hemos utilizado dicha opción.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Mapa de grupo de datos de usuario&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Mapea los grupos de LDAP a los roles de usuario de Rocket.Chat. No hemos tocado más allá del
  valor por defecto:&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap10.png&quot; width=&quot;600&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Sincronizar automáticamente los grupos de LDAP a Channels&lt;/strong&gt; –&amp;gt; OFF&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Si se habilita esta opción, añadirá automáticamente a los usuarios a un canal basándose en
  su grupo LDAP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Channel Administrator&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Administrador por defecto en caso de que se creen automáticamente canales que no existan
  durante la sincronización. Dejaremos el usuario por defecto&lt;/p&gt;

    &lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap11.png&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Mapa del Channel Grupo LDAP&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Dejamos los valores por defecto. Mapea los grupos LDAP a los canales de Rocket.Chat.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Eliminar automáticamente usuarios de Salas&lt;/strong&gt; –&amp;gt; OFF&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Habilita esta opción si desea eliminar a cualquier usuario en un canal que no esté en el 
  grupo LDAP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Sincronizar Avatar del Usuario / Campo de avatar de Usuario&lt;/strong&gt; –&amp;gt; OFF&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;En caso de que queramos que nuestros usuarios dispongan del avatar de usuario, seleccionaremos
  el campo LDAP el cual tenga el avatar de usuario.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Sincronización de fondo&lt;/strong&gt; –&amp;gt; ON&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Intervalo de sincronización de fondo&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Se puede usar diferentes formatos para el intervalo: &lt;a href=&quot;http://bunkat.github.io/later/parsers.html#text&quot;&gt;Cron Text Parser&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Sincronización de fondo - Importar nuevos usuarios&lt;/strong&gt; –&amp;gt; ON&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Importará todos los usuarios (según criterios de filtro) que existen en LDAP y no en Rocket.Chat.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Actualización de sincronización de fondo de usuarios existentes&lt;/strong&gt; –&amp;gt; ON&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Sincronizará el avatar, los campos, el nombre de usuario, etc de todos los usuarios ya 
  importados.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Por último, debemos pulsar el siguiente botón azul para que se ejecute la sincronización.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap12.png&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Una vez realizado los cambios, ya tendríamos una configuración inicial de LDAP. Lo único ya sería 
esperar a que se conecte al servidor y se sincronicen los usuarios de LDAP.&lt;/p&gt;

&lt;p&gt;Una vez haya terminado la sincronización, podremos acceder a los usuarios en la siguiente pestaña
Administración &amp;gt; Usuarios:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap13.png&quot; width=&quot;1000&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Los usuarios añadidos mediante LDAP en nuestro caso serán los mismos añadidos mediante este fichero:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dn: uid=maria,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
objectClass: person
cn:: TWFyaWEgZGVsIENhcm1lbiBMb3JhIFJvbcOhbgo=
uid: maria
uidNumber: 2002
gidNumber: 2502
homeDirectory: /home/maria
loginShell: /bin/bash
userPassword:: {SSHA}OuK8ryroLXs+fpudBXcJrMTZ3ASD/H46
sn:: TG9yYSBSb23DoW4K
mail: marialoraroman@gmail.com
givenName: maria

dn: uid=rosaura,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: Um9zYXVyYSBIYWJhIFBlcmVhCg==
uid: rosaura
uidNumber: 2003
gidNumber: 2503
homeDirectory: /home/rosaura
loginShell: /bin/bash
userPassword: {SSHA}sgJUlNb20SdYbUclyXQNFCe0tjjdijdS
sn: SGFiYSBQZXJlYQo=
mail: rosaurahabaperea@gmail.com
givenName: rosaura

dn: uid=laura,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: TGF1cmEgTW9yYWxlcyBDYWJlbGxvCg==
uid: laura
uidNumber: 2004
gidNumber: 2504
homeDirectory: /home/laura
loginShell: /bin/bash
userPassword: {SSHA}bZ1BzoZWQGN25d5ecDzOVfaSi35h7/Dq
sn: TW9yYWxlcyBDYWJlbGxvCg==
mail: lauramoralescabello@gmail.com
givenName: laura

dn: uid=pablo,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: UGFibG8gU3VzbyBHb256YWxlego=
uid: pablo
uidNumber: 2005
gidNumber: 2505
homeDirectory: /home/pablo
loginShell: /bin/bash
userPassword: {SSHA}1Dmh5fQgowk0Cvfzje4B71kC1SmeiIqi
sn: U3VzbyBHb256YWxlego=
mail: pablosusogonzalex@gmail.com
givenName: pablo

dn: uid=arturo,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: QXJ0dXJvIEJvcnJlcm8gR29uemFsZXoK
uid: arturo
uidNumber: 2006
gidNumber: 2506
homeDirectory: /home/arturo  
loginShell: /bin/bash
userPassword: {SSHA}RoA4bctGSRG537NslZYSifHAmzf0DWTv
sn: Qm9ycmVybyBHb256YWxlego=
mail: arturo@debian.org
givenName: arturo

dn: uid=diego,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: RGllZ28gTG9zYWRhIEZ1ZW50ZXMK
uid: diego
uidNumber: 2007
gidNumber: 2507
homeDirectory: /home/diego
loginShell: /bin/bash
userPassword: {SSHA}pclPYfaM0zvJos+h86gu+bx//Q+UULyj
sn: TG9zYWRhIEZ1ZW50ZXMK
mail: dlosadafuentes@gmail.com
givenName: diego

dn: uid=isabel,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: SXNhYmVsIE1vcmFsZXMgQ2FiZWxsbwo=
uid: isabel
uidNumber: 2008
gidNumber: 2508
homeDirectory: /home/isabel
loginShell: /bin/bash
userPassword: {SSHA}cBES958lKSd7Trpj7Yrah5yHfX4Ikl/e
sn: TW9yYWxlcyBDYWJlbGxvCg==
mail: isabelmoralescabello@gmail.com
givenName: isabel

dn: uid=alberto,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: QWxiZXJ0byBDb3Jkb24gQXJldmFsbwo=
uid: alberto
uidNumber: 2009
gidNumber: 2509
homeDirectory: /home/alberto
loginShell: /bin/bash
userPassword: {SSHA}GMTZonB3W7TcL9D0BEVfO7Z6xUVKbir8
sn: Q29yZG9uIEFyZXZhbG8K
mail: albertocordonarevalo@gmail.com
givenName: alberto

dn: uid=rosalia,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org
objectClass: top
objectClass: posixAccount
objectClass: inetOrgPerson
cn:: Um9zYWxpYSBDb3Jkb24gQXJldmFsbwo=
uid: rosalia
uidNumber: 2010
gidNumber: 2510
homeDirectory: /home/rosalia
loginShell: /bin/bash
userPassword: {SSHA}fmbcJQuDFJY6+fW3KXBs8NDHugw5ULuO
sn: Q29yZG9uIEFyZXZhbG8K
mail: rosaliacordonarevalo@gmail.com
givenName: rosalia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'admin-post'; return false&quot;&gt;&amp;lt; Opciones de administrador&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'ldap-post'; return false&quot;&gt;Configuración de LDAP &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="LDAP" /><category term="Rocket.Chat" /><category term="Settings" /><category term="Authentication" /><summary type="html">Rocket.Chat, como hemos comentado anteriormente, permite que los usuarios se autentiquen para entrar al servidor mediante LDAP. Podemos acceder a la configuración de LDAP de la siguiente manera: Accedemos al servidor como accedemos normalmente. En la siguiente ventana, pinchar en el icono de la parte superior izquierda, y acceder a la opción de Administración. Una vez ahí, se nos desplegará un listado con varias opciones. Nos tendremos que ir a la sección de Configuración y, para que sea más sencillo, poner en el buscador “LDAP” y acceder: A continuación, se nos desplegará las opciones de las que dispone LDAP. Nosotros seleccionaremos las siguientes opciones para nuestro uso personal: Habilitar –&amp;gt; ON Debemos seleccionar esta opción para que podamos utilizar LDAP Login Fallback –&amp;gt; OFF En nuestro caso, no lo vamos a seleccionar por ahora, ya que en principio queremos que todos los inicios de sesión sean mediante LDAP. Encontrar usuario después de iniciar sesión –&amp;gt; ON Garantiza que se realizó correctamente la búsqueda del DN del usuario después de la vinculación. Servidor En el cuadro de texto, debemos incorporar o el nombre del servidor LDAP o su dirección IP. Puerto Puerto para acceder a nuestro servidor LDAP Vuelva a conectar –&amp;gt; ON Cuando la conexión se vea interrumpida, permite intentar conectarse automáticamente de nuevo. Cifrado –&amp;gt; deshabilitado En nuestro caso, como no lo tenemos configurado no pondremos ningún cifrado, pero en el caso del instituto, usaremos SSL/LDAPS. CA Cert / Rechazar no autorizada –&amp;gt; OFF Puesto que no vamos a utilizar cifrado, estas opciones están desactivadas. Base DN El nombre distinguido completamente calificado de un subárbol LDAP donde quieras buscar usuarios y grupos. En nuestro caso, hemos creado un servidor LDAP con unos datos de prueba, así que usaremos el siguiente: Nivel de Registro interno –&amp;gt; Deshabilitado A partir de aquí, ya se podría comprobar la conexión con el botón de color azul. También, en cualquier caso, podemos restablecer la configuración de esta sección. Ahora pasaremos inmediatamente a configurar la sección llamada Autenticación, que es la otra parte importante para configurar LDAP. En ella, nos encontramos las siguientes opciones: Habilitar –&amp;gt; ON Habilitamos la autenticación de LDAP DN de usuario El usuario usado para realizar las búsquedas de usuarios y para autenticarlos. Usualmente, se utiliza el administrador del servidor LDAP. Contraseña La contraseña LDAP usada para el administrador anteriormente puesto. Terminada esta sección, pasaremos a la siguiente, Sincronizar/Importar. Esta sección nos permitirá configurar la búsqueda de usuarios y la posterior incorporación como usuarios en nuestro servidor Rocket.Chat. Esta sección dispone de las siguientes opciones: Campo de Nombre El campo utilizado como Nombre de usuario en Rocket.Chat para los nuevos usuarios. Si este campo se deja en blanco, se usará el nombre de usuario informado en la página de inicio de sesión. En nuestro caso, hemos utilizado el campo LDAP “givenName”. Campo Identificador Único El campo que se utilizará para vincular al usuario LDAP y el usuario Rocket.Chat. Dejar el valor por defecto. Dominio Predeterminado Se usa para crear un correo electrónico exclusivo para los usuarios donde el correo electrónico no se haya implementado mediante LDAP. Nosotros usaremos el siguiente: Fusionar usuarios existentes –&amp;gt; ON Sincronizar Datos de Usuario –&amp;gt; ON Mantiene los datos del usuario en sincronía con el servidor al iniciar sesión. Mapa de Campos de Datos de Usuario Configura los campos de usuario del servidor Rocket.Chat, poblándolos con los datos de los registros LDAP. Los únicos campos que están disponibles en Rocket.Chat son: name, email y customFields. Nosotros lo hemos configurado de la siguiente forma: Sincronizar grupos de LDAP –&amp;gt; ON Eliminar automáticamente roles de usuario –&amp;gt; OFF Se eliminan los roles de Rocket.Chat para implementar roles según los asignados en el servidor LDAP. Filtro de grupo de usuarios Filtro usado para verificar que un usuario pertenece a un grupo. Dejar el valor por defecto: Base DN de grupos LDAP DN base utilizado para buscar usuarios. En nuestro caso, no hemos utilizado dicha opción. Mapa de grupo de datos de usuario Mapea los grupos de LDAP a los roles de usuario de Rocket.Chat. No hemos tocado más allá del valor por defecto: Sincronizar automáticamente los grupos de LDAP a Channels –&amp;gt; OFF Si se habilita esta opción, añadirá automáticamente a los usuarios a un canal basándose en su grupo LDAP. Channel Administrator Administrador por defecto en caso de que se creen automáticamente canales que no existan durante la sincronización. Dejaremos el usuario por defecto Mapa del Channel Grupo LDAP Dejamos los valores por defecto. Mapea los grupos LDAP a los canales de Rocket.Chat. Eliminar automáticamente usuarios de Salas –&amp;gt; OFF Habilita esta opción si desea eliminar a cualquier usuario en un canal que no esté en el grupo LDAP. Sincronizar Avatar del Usuario / Campo de avatar de Usuario –&amp;gt; OFF En caso de que queramos que nuestros usuarios dispongan del avatar de usuario, seleccionaremos el campo LDAP el cual tenga el avatar de usuario. Sincronización de fondo –&amp;gt; ON Intervalo de sincronización de fondo Se puede usar diferentes formatos para el intervalo: Cron Text Parser Sincronización de fondo - Importar nuevos usuarios –&amp;gt; ON Importará todos los usuarios (según criterios de filtro) que existen en LDAP y no en Rocket.Chat. Actualización de sincronización de fondo de usuarios existentes –&amp;gt; ON Sincronizará el avatar, los campos, el nombre de usuario, etc de todos los usuarios ya importados. Por último, debemos pulsar el siguiente botón azul para que se ejecute la sincronización. Una vez realizado los cambios, ya tendríamos una configuración inicial de LDAP. Lo único ya sería esperar a que se conecte al servidor y se sincronicen los usuarios de LDAP. Una vez haya terminado la sincronización, podremos acceder a los usuarios en la siguiente pestaña Administración &amp;gt; Usuarios: Los usuarios añadidos mediante LDAP en nuestro caso serán los mismos añadidos mediante este fichero: dn: uid=maria,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson objectClass: person cn:: TWFyaWEgZGVsIENhcm1lbiBMb3JhIFJvbcOhbgo= uid: maria uidNumber: 2002 gidNumber: 2502 homeDirectory: /home/maria loginShell: /bin/bash userPassword:: {SSHA}OuK8ryroLXs+fpudBXcJrMTZ3ASD/H46 sn:: TG9yYSBSb23DoW4K mail: marialoraroman@gmail.com givenName: maria dn: uid=rosaura,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: Um9zYXVyYSBIYWJhIFBlcmVhCg== uid: rosaura uidNumber: 2003 gidNumber: 2503 homeDirectory: /home/rosaura loginShell: /bin/bash userPassword: {SSHA}sgJUlNb20SdYbUclyXQNFCe0tjjdijdS sn: SGFiYSBQZXJlYQo= mail: rosaurahabaperea@gmail.com givenName: rosaura dn: uid=laura,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: TGF1cmEgTW9yYWxlcyBDYWJlbGxvCg== uid: laura uidNumber: 2004 gidNumber: 2504 homeDirectory: /home/laura loginShell: /bin/bash userPassword: {SSHA}bZ1BzoZWQGN25d5ecDzOVfaSi35h7/Dq sn: TW9yYWxlcyBDYWJlbGxvCg== mail: lauramoralescabello@gmail.com givenName: laura dn: uid=pablo,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: UGFibG8gU3VzbyBHb256YWxlego= uid: pablo uidNumber: 2005 gidNumber: 2505 homeDirectory: /home/pablo loginShell: /bin/bash userPassword: {SSHA}1Dmh5fQgowk0Cvfzje4B71kC1SmeiIqi sn: U3VzbyBHb256YWxlego= mail: pablosusogonzalex@gmail.com givenName: pablo dn: uid=arturo,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: QXJ0dXJvIEJvcnJlcm8gR29uemFsZXoK uid: arturo uidNumber: 2006 gidNumber: 2506 homeDirectory: /home/arturo loginShell: /bin/bash userPassword: {SSHA}RoA4bctGSRG537NslZYSifHAmzf0DWTv sn: Qm9ycmVybyBHb256YWxlego= mail: arturo@debian.org givenName: arturo dn: uid=diego,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: RGllZ28gTG9zYWRhIEZ1ZW50ZXMK uid: diego uidNumber: 2007 gidNumber: 2507 homeDirectory: /home/diego loginShell: /bin/bash userPassword: {SSHA}pclPYfaM0zvJos+h86gu+bx//Q+UULyj sn: TG9zYWRhIEZ1ZW50ZXMK mail: dlosadafuentes@gmail.com givenName: diego dn: uid=isabel,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: SXNhYmVsIE1vcmFsZXMgQ2FiZWxsbwo= uid: isabel uidNumber: 2008 gidNumber: 2508 homeDirectory: /home/isabel loginShell: /bin/bash userPassword: {SSHA}cBES958lKSd7Trpj7Yrah5yHfX4Ikl/e sn: TW9yYWxlcyBDYWJlbGxvCg== mail: isabelmoralescabello@gmail.com givenName: isabel dn: uid=alberto,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: QWxiZXJ0byBDb3Jkb24gQXJldmFsbwo= uid: alberto uidNumber: 2009 gidNumber: 2509 homeDirectory: /home/alberto loginShell: /bin/bash userPassword: {SSHA}GMTZonB3W7TcL9D0BEVfO7Z6xUVKbir8 sn: Q29yZG9uIEFyZXZhbG8K mail: albertocordonarevalo@gmail.com givenName: alberto dn: uid=rosalia,ou=People,dc=manuel-lora,dc=gonzalonazareno,dc=org objectClass: top objectClass: posixAccount objectClass: inetOrgPerson cn:: Um9zYWxpYSBDb3Jkb24gQXJldmFsbwo= uid: rosalia uidNumber: 2010 gidNumber: 2510 homeDirectory: /home/rosalia loginShell: /bin/bash userPassword: {SSHA}fmbcJQuDFJY6+fW3KXBs8NDHugw5ULuO sn: Q29yZG9uIEFyZXZhbG8K mail: rosaliacordonarevalo@gmail.com givenName: rosalia &amp;lt; Opciones de administrador Configuración de LDAP &amp;gt;</summary></entry><entry><title type="html">Opciones de Administrador</title><link href="/blog/admin-post" rel="alternate" type="text/html" title="Opciones de Administrador" /><published>2021-05-02T00:00:00+02:00</published><updated>2021-05-02T00:00:00+02:00</updated><id>/blog/admin-post</id><content type="html" xml:base="/blog/admin-post">&lt;p&gt;Rocket.Chat permite administrar la aplicación, cambiando las diferentes opciones de las que esta dispone.
Ahora iremos comentando una por una, las características que tiene y parándonos en las más interesantes:&lt;/p&gt;

&lt;p&gt;Esta información se halla una vez desplegada la aplicación en el botón superior izquierdo de nuestro
perfil:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/ldap1.png&quot; width=&quot;600&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Y se nos presentará la siguiente pestaña:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin1.png&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;

&lt;p&gt;En ella nos encontramos las siguientes configuraciones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;En la primera pestaña nos encontramos &lt;strong&gt;Información&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta pestaña podemos encontrar datos del despliegue de Rocket.Chat, así como de los usuarios existentes
u de las salas que están creadas en el servidor.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin2.png&quot; width=&quot;1000&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Después, disponemos de la pestaña &lt;strong&gt;Importación&lt;/strong&gt; en la cual, podemos importar datos de otras 
aplicaciones como Slack, CSV o Hipchat.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;La siguiente pestaña es la de usuarios, en la cual tendremos la lista de usuarios incorporados en
Rocket.Chat. Esta lista se irá rellenando dependiendo de si los usuarios entran al servidor mediante
autenticación LDAP u por correo, etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin3.png&quot; width=&quot;1000&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;A continuación, nos encontramos con la pestaña de &lt;strong&gt;Salas&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde aquí podemos administrar las diferentes salas y poder filtrarlas para modificar su nombre, la
descripción, el tema, etc.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin4.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Otra pestaña es la de &lt;strong&gt;Invites&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esta pestaña nos muestra todas los enlaces generados para añadir a un usuario a un espacio de trabajo
u sala. En resumidas cuentas, todas las invitaciones generadas.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin5.png&quot; width=&quot;1000&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;La siguiente pestaña que nos encontraremos es la de &lt;strong&gt;Servicios de conectividad&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;Con Rocket.Chat nos podemos conectar a uno de sus servicios llamados Rocket.Chat Cloud, el cual nos
  permite acceder a estas características:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Entrada de notificaciones Push de Rocket.Chat&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Marketplace de Rocket.Chat&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Omnichannel Proxy&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Sincronización automática de licencia&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para usar este y otros servicios de Rocket.Chat, el servidor debe estar conectado a &lt;em&gt;cloud.rocket.chat&lt;/em&gt;.
Puedes seguir los siguientes pasos para conectarte &lt;a href=&quot;https://docs.rocket.chat/guides/administrator-guides/administration/connectivity-services&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin6.png&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;La siguiente pestaña es &lt;strong&gt;Ver Registros&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta sección se puede observar un pequeño log de lo que está pasando en el servidor&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin7.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Otra de las secciones trata sobre &lt;strong&gt;Sonidos personalizados&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aquí, podemos añadir diferentes ficheros de audio en formato MP3 para su posterior uso como sonido de
notificaciones. Estas opciones se pueden cambiar en &lt;em&gt;Preferencias&lt;/em&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin8.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;La siguiente sección se llama &lt;strong&gt;Federation DashBoard&lt;/strong&gt; y esta se encuentra todavía bajo construcción.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nos remitimos ahora a la sección &lt;strong&gt;Aplicaciones&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esta sección también se encuentra en construcción, pero dispone de algo más de información.&lt;/p&gt;

&lt;p&gt;Son scripts o paquetes dinámicos que permiten personalizar su instancia de Rocket.Chat 
sin tener que bifurcar el código base. Si desea obtener más información, puedes consultar
&lt;a href=&quot;https://go.rocket.chat/i/developing-an-app&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Otra de las pestañas es &lt;strong&gt;Marketplace&lt;/strong&gt; que solo funcionará si tenemos la opción anteriormente comentada.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;La sección &lt;strong&gt;Bandejas de entrada de correo electrónico&lt;/strong&gt; nos permite introducir direcciones de correo
para poder visualizar los diferentes correos que llegan a dicha dirección.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin9.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Esta sección es una de las pocas secciones que está en versión &lt;em&gt;Alpha&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La sección &lt;strong&gt;Emoji personalizado&lt;/strong&gt;, permite subir una imagen y añadirla al servidor como emoji para
uso público.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin10.png&quot; width=&quot;1000&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Rocket.Chat también dispone de una sección para &lt;strong&gt;Integraciones&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esta sección nos permite integrar algunos servicios externos en forma de Script, para que sea el
servicio quien controle parte del servidor (Incoming) o que sea el servidor quien se encargue de
ejecutar dicho script cuando sea necesario (Outgoing).&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin11.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Alguna de las integraciones pueden &lt;em&gt;Jira&lt;/em&gt;, &lt;em&gt;Gitlab&lt;/em&gt;, &lt;em&gt;Github&lt;/em&gt;, etc.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La siguiente sección trata sobre el uso de &lt;strong&gt;Aplicaciones OAuth&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permite añadir diferentes aplicaciones que redigiran a los usuarios para que se autentiquen.
De manera predeterminada, solo disponemos de una llamada &lt;em&gt;Zapier&lt;/em&gt;, pero podemos añadir más aquí:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin12.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;La sección de &lt;strong&gt;Remitente&lt;/strong&gt; permite enviar correos electrónicos.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin13.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Otra de las secciones es &lt;strong&gt;Estado de usuario personalizado&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En ella, podemos cambiar nuestro estado de perfil en vez de usar la predeterminada.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por último, disponemos de la sección llamada &lt;strong&gt;Permisos&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde aquí, podemos gestionar las diferentes acciones y configuraciones que pueden tomar los diferentes 
roles en nuestro servidor Rocket.Chat.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/admin14.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Además de estas secciones, dentro de la pestaña de &lt;em&gt;Configuración&lt;/em&gt;, nos encontramos con la sección
&lt;strong&gt;General&lt;/strong&gt; teniendo esta las siguientes secciones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Permitir el &lt;strong&gt;uso de certificados autofirmados e inválidos&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto permitirá a Rocket.Chat validar mediante link y solo para previsualizaciones.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Permitir el uso de &lt;strong&gt;Bugsnag API Key&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permite la detección y corrección de Bugs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Prefijos CDN&lt;/strong&gt; para JS/CSS u otros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se puede configurar un prefijo CDN de donde cargará el contenido de JS/CSS.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Habilitar &lt;strong&gt;salas favoritas&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permite a los usuarios el que puedan colocar en favoritos las diferentes salas públicas/ privadas.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Canal por defecto&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez el usuario se conecte al servidor, este entrará en dicho canal de manera predeterminada.
Si el campo está vacío, o tiene un canal inválido, el usuario será dirigido a la página
principal del servidor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forzar la deshabilitación de &lt;strong&gt;OpLog para Caché&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No se usará OpLog para sincronizar la caché incluso si está habilitada dicha opción.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Forzar SSL&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esta opción no la usaremos, porque para eso tenemos el proxy inverso que redireccionará a https.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Uso de &lt;strong&gt;Google Tag Manager ID&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lenguaje&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reinicio&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contenido del fichero &lt;strong&gt;&lt;em&gt;Robots.txt&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Permite cambiar el contenido de dicho fichero, para ayudar a indexar de manera correcta el 
servidor en diferentes motores de búsqueda.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mostrar &lt;strong&gt;Opciones Wizard&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se recomienda no tocar esta opción ya que puede hacer que se bloquee el servidor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nombre del sitio&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;URL del sitio&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Guardar &lt;strong&gt;último mensaje&lt;/strong&gt; de cada sala.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto permitirá ver dichos mensajes en la barra lateral.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Contador de &lt;strong&gt;mensajes no leídos&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contador de &lt;strong&gt;mensajes no leídos para mensajes directos&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Habilitar &lt;strong&gt;notificaciones&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y otras tantas características que tratan de la API RESTful u integración de Iframe.&lt;/p&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'user-post'; return false&quot;&gt;&amp;lt; Conexiones y usuarios&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'ldap-post'; return false&quot;&gt;Configuración de LDAP &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Administration" /><category term="Rocket.Chat" /><category term="Options" /><summary type="html">Rocket.Chat permite administrar la aplicación, cambiando las diferentes opciones de las que esta dispone. Ahora iremos comentando una por una, las características que tiene y parándonos en las más interesantes: Esta información se halla una vez desplegada la aplicación en el botón superior izquierdo de nuestro perfil: Y se nos presentará la siguiente pestaña: En ella nos encontramos las siguientes configuraciones: En la primera pestaña nos encontramos Información. En esta pestaña podemos encontrar datos del despliegue de Rocket.Chat, así como de los usuarios existentes u de las salas que están creadas en el servidor. Después, disponemos de la pestaña Importación en la cual, podemos importar datos de otras aplicaciones como Slack, CSV o Hipchat. La siguiente pestaña es la de usuarios, en la cual tendremos la lista de usuarios incorporados en Rocket.Chat. Esta lista se irá rellenando dependiendo de si los usuarios entran al servidor mediante autenticación LDAP u por correo, etc. A continuación, nos encontramos con la pestaña de Salas. Desde aquí podemos administrar las diferentes salas y poder filtrarlas para modificar su nombre, la descripción, el tema, etc. Otra pestaña es la de Invites. Esta pestaña nos muestra todas los enlaces generados para añadir a un usuario a un espacio de trabajo u sala. En resumidas cuentas, todas las invitaciones generadas. La siguiente pestaña que nos encontraremos es la de Servicios de conectividad. Con Rocket.Chat nos podemos conectar a uno de sus servicios llamados Rocket.Chat Cloud, el cual nos permite acceder a estas características: Entrada de notificaciones Push de Rocket.Chat Marketplace de Rocket.Chat Omnichannel Proxy Sincronización automática de licencia Para usar este y otros servicios de Rocket.Chat, el servidor debe estar conectado a cloud.rocket.chat. Puedes seguir los siguientes pasos para conectarte aquí. La siguiente pestaña es Ver Registros En esta sección se puede observar un pequeño log de lo que está pasando en el servidor Otra de las secciones trata sobre Sonidos personalizados Aquí, podemos añadir diferentes ficheros de audio en formato MP3 para su posterior uso como sonido de notificaciones. Estas opciones se pueden cambiar en Preferencias. La siguiente sección se llama Federation DashBoard y esta se encuentra todavía bajo construcción. Nos remitimos ahora a la sección Aplicaciones Esta sección también se encuentra en construcción, pero dispone de algo más de información. Son scripts o paquetes dinámicos que permiten personalizar su instancia de Rocket.Chat sin tener que bifurcar el código base. Si desea obtener más información, puedes consultar aquí. Otra de las pestañas es Marketplace que solo funcionará si tenemos la opción anteriormente comentada. La sección Bandejas de entrada de correo electrónico nos permite introducir direcciones de correo para poder visualizar los diferentes correos que llegan a dicha dirección. Esta sección es una de las pocas secciones que está en versión Alpha. La sección Emoji personalizado, permite subir una imagen y añadirla al servidor como emoji para uso público. Rocket.Chat también dispone de una sección para Integraciones. Esta sección nos permite integrar algunos servicios externos en forma de Script, para que sea el servicio quien controle parte del servidor (Incoming) o que sea el servidor quien se encargue de ejecutar dicho script cuando sea necesario (Outgoing). Alguna de las integraciones pueden Jira, Gitlab, Github, etc. La siguiente sección trata sobre el uso de Aplicaciones OAuth. Permite añadir diferentes aplicaciones que redigiran a los usuarios para que se autentiquen. De manera predeterminada, solo disponemos de una llamada Zapier, pero podemos añadir más aquí: La sección de Remitente permite enviar correos electrónicos. Otra de las secciones es Estado de usuario personalizado. En ella, podemos cambiar nuestro estado de perfil en vez de usar la predeterminada. Por último, disponemos de la sección llamada Permisos. Desde aquí, podemos gestionar las diferentes acciones y configuraciones que pueden tomar los diferentes roles en nuestro servidor Rocket.Chat. Además de estas secciones, dentro de la pestaña de Configuración, nos encontramos con la sección General teniendo esta las siguientes secciones: Permitir el uso de certificados autofirmados e inválidos. Esto permitirá a Rocket.Chat validar mediante link y solo para previsualizaciones. Permitir el uso de Bugsnag API Key. Permite la detección y corrección de Bugs Prefijos CDN para JS/CSS u otros. Se puede configurar un prefijo CDN de donde cargará el contenido de JS/CSS. Habilitar salas favoritas. Permite a los usuarios el que puedan colocar en favoritos las diferentes salas públicas/ privadas. Canal por defecto. Una vez el usuario se conecte al servidor, este entrará en dicho canal de manera predeterminada. Si el campo está vacío, o tiene un canal inválido, el usuario será dirigido a la página principal del servidor. Forzar la deshabilitación de OpLog para Caché. No se usará OpLog para sincronizar la caché incluso si está habilitada dicha opción. Forzar SSL. Esta opción no la usaremos, porque para eso tenemos el proxy inverso que redireccionará a https. Uso de Google Tag Manager ID. Lenguaje Reinicio Contenido del fichero Robots.txt Permite cambiar el contenido de dicho fichero, para ayudar a indexar de manera correcta el servidor en diferentes motores de búsqueda. Mostrar Opciones Wizard. Se recomienda no tocar esta opción ya que puede hacer que se bloquee el servidor. Nombre del sitio URL del sitio Guardar último mensaje de cada sala. Esto permitirá ver dichos mensajes en la barra lateral. Contador de mensajes no leídos. Contador de mensajes no leídos para mensajes directos. Habilitar notificaciones. Y otras tantas características que tratan de la API RESTful u integración de Iframe. &amp;lt; Conexiones y usuarios Configuración de LDAP &amp;gt;</summary></entry><entry><title type="html">Conexiones y usuarios</title><link href="/blog/user-post" rel="alternate" type="text/html" title="Conexiones y usuarios" /><published>2021-05-02T00:00:00+02:00</published><updated>2021-05-02T00:00:00+02:00</updated><id>/blog/user-post</id><content type="html" xml:base="/blog/user-post">&lt;p&gt;El usuario de la aplicación puede conectarse a través de 3 clientes diferentes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;En primer lugar nos encontramos con la conexión mediante &lt;strong&gt;navegador web&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para conectarse de esta manera a un servidor de Rocket.Chat, debemos buscar la dirección donde se 
aloje dicha aplicación, introducir las credenciales y seguidamente, ya estaremos como miembros del
servidor.&lt;/p&gt;

&lt;p&gt;Para ello, vamos a acceder a nuestro servidor web y vamos a introducir unas nuevas credenciales para
un usuario de prueba:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/user3.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Acto seguido, nos aparecerá una nueva ventana que nos pedirá el nombre de usuario que se va a ver en 
el servidor:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/user4.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Y ya tendríamos acceso al servidor como un usuario sin permisos (de manera predeterminada, se puede 
cambiar más adelante)&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/user5.png&quot; width=&quot;800&quot; /&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Después tenemos la conexión mediante la &lt;strong&gt;aplicación de escritorio&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dispone del mismo funcionamiento que el anterior, salvo que se realizará todo desde la aplicación.
Se puede descargar &lt;a href=&quot;https://rocket.chat/install&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una cosa de la cuál dispone este método de conexión es la posibilidad de conectarse a varios servidores.
Simplemente, debes pulsar el icono &lt;em&gt;+&lt;/em&gt; para añadir un nuevo servidor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por último, el usuario también podrá conectarse mediante la &lt;strong&gt;app móvil&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos descargarnos dicha aplicación mediante la App Store tanto de IOS como de Android.&lt;/p&gt;

&lt;p&gt;Una vez nos la descarguemos, al abrirla, nos aparecerán dos opciones, la primera que nos permitirá 
unirnos a un workspace o la otra, que nos permite crearla.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/user1.jpg&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
En caso de querer unirnos, nos aparecerá la siguiente ventana en la cual tendremos que incorporar la URL
del sitio. (Dicha información se encuentra en la sección &lt;em&gt;General&lt;/em&gt; en la pestaña de Administración)&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/user2.jpg&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y hasta aquí el post de las diferentes conexiones de los usuarios.&lt;/p&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'dockercompose-post'; return false&quot;&gt;&amp;lt; Instalación mediante Docker-compose&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'admin-post'; return false&quot;&gt;Opciones de administrador &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Users" /><category term="Connections" /><category term="Rocket.Chat" /><category term="App" /><summary type="html">El usuario de la aplicación puede conectarse a través de 3 clientes diferentes: En primer lugar nos encontramos con la conexión mediante navegador web. Para conectarse de esta manera a un servidor de Rocket.Chat, debemos buscar la dirección donde se aloje dicha aplicación, introducir las credenciales y seguidamente, ya estaremos como miembros del servidor. Para ello, vamos a acceder a nuestro servidor web y vamos a introducir unas nuevas credenciales para un usuario de prueba: Acto seguido, nos aparecerá una nueva ventana que nos pedirá el nombre de usuario que se va a ver en el servidor: Y ya tendríamos acceso al servidor como un usuario sin permisos (de manera predeterminada, se puede cambiar más adelante) Después tenemos la conexión mediante la aplicación de escritorio. Dispone del mismo funcionamiento que el anterior, salvo que se realizará todo desde la aplicación. Se puede descargar aquí. Una cosa de la cuál dispone este método de conexión es la posibilidad de conectarse a varios servidores. Simplemente, debes pulsar el icono + para añadir un nuevo servidor. Por último, el usuario también podrá conectarse mediante la app móvil. Podemos descargarnos dicha aplicación mediante la App Store tanto de IOS como de Android. Una vez nos la descarguemos, al abrirla, nos aparecerán dos opciones, la primera que nos permitirá unirnos a un workspace o la otra, que nos permite crearla. En caso de querer unirnos, nos aparecerá la siguiente ventana en la cual tendremos que incorporar la URL del sitio. (Dicha información se encuentra en la sección General en la pestaña de Administración) Y hasta aquí el post de las diferentes conexiones de los usuarios. &amp;lt; Instalación mediante Docker-compose Opciones de administrador &amp;gt;</summary></entry><entry><title type="html">Instalación de Rocket.Chat via systemd</title><link href="/blog/systemd-post" rel="alternate" type="text/html" title="Instalación de Rocket.Chat via systemd" /><published>2021-04-18T00:00:00+02:00</published><updated>2021-04-18T00:00:00+02:00</updated><id>/blog/systemd-post</id><content type="html" xml:base="/blog/systemd-post">&lt;p&gt;Rocket.Chat dispone de tres imágenes oficiales, siendo la versión &lt;em&gt;stable&lt;/em&gt; la que en principio 
vamos a utilizar.&lt;/p&gt;

&lt;p&gt;Para bajarse alguna de las imagénes, vamos a ejecutar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull rocket.chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Demo de la descarga:&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/descarga-imagen.gif&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Una vez bajada dicha imagen, en caso de querer ejecutar Rocket.Chat sobre &lt;em&gt;systemd&lt;/em&gt; vamos a seguir los
siguientes pasos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primero creamos una red en Docker:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker network create rocketchat_default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Después, creamos dos servicios: el primero será el servicio para Mongodb y el otro, el servicio de
Rocket.Chat.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;mongo.service&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [Unit]
  Description=mongo
  Requires=docker.service
  After=docker.service
	
  [Service]
  EnvironmentFile=/etc/mongo				&amp;lt;-- ficheros del servicio
  User=manuel
  Restart=always
  TimeoutStartSec=0
  ExecStartPre=-/usr/bin/docker kill mongo
  ExecStartPre=-/usr/bin/docker rm mongo
  ExecStartPre=-/usr/bin/docker pull mongo:3.2
	
	
  ExecStart=/usr/bin/docker run \
      --name mongo \
      -v /media/manuel/Datos1/PROYECTO/mongo:/data/db \		&amp;lt;-- ruta del volumen para Mongodb
      --net=rocketchat_default \
      mongo:3.2 \
      mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
	
  ExecStop=-/usr/bin/docker kill mongo
  ExecStop=-/usr/bin/docker rm mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;rocketchat.service&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [Unit]
  Description=rocketchat
  Requires=docker.service
  Requires=mongo.service
  After=docker.service
  After=mongo.service
	
  [Service]
  EnvironmentFile=/etc/rocketchat				&amp;lt;-- ficheros del servicio
  User=manuel						
  Restart=always
  TimeoutStartSec=0
  ExecStartPre=-/usr/bin/docker kill rocketchat
  ExecStartPre=-/usr/bin/docker rm rocketchat
  ExecStartPre=-/usr/bin/docker pull rocketchat/rocket.chat:latest
	
  ExecStart=/usr/bin/docker run \
      --name rocketchat \
      -v /media/manuel/Datos1/PROYECTO/rocketchat:/app/uploads \	&amp;lt;-- donde subir ficheros
      -e MONGO_OPLOG_URL=mongodb://mongo:27017/local \
      -e MONGO_URL=mongodb://mongo:27017/rocketchat \
      -e ROOT_URL=https://sub.domain.xx \
      --link mongo:mongo \
      --net=rocketchat_default \
      --expose 3000 \
      rocketchat/rocket.chat:latest
	
  ExecStop=-/usr/bin/docker kill rocketchat
  ExecStop=-/usr/bin/docker rm rocketchat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creados ambos servicios, vamos a iniciar el servicio de &lt;em&gt;Mongodb&lt;/em&gt; y creamos el siguiente contenedor 
Docker:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run \
      --name mongo-init-replica \
      --link mongo:mongo \
      --rm \
      --net=rocketchat_default \
      mongo:3.2 \
      mongo mongo/rocketchat --eval &quot;rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/contenedor-mongo.gif&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por último, vamos a iniciar el servicio de Rocket.Chat creado anteriormente:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start rocketchat.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Con esto, ya tendriamos nuestro servicio Rocket.Chat funcionando en una máquina Docker, pero funcionando
desde systemd.&lt;/p&gt;

&lt;p&gt;Como última aclaración, en caso de tener un proxy inverso, nos debemos asegurar que está añadido
en la red creada anteriormente. Para ello, debemos añadir la siguiente línea en el archivo
&lt;em&gt;rocketchat.service&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExecStartPre=-/usr/bin/docker network connect rocketchat_default Nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Ahora pasaremos a otro tipo de instalación.&lt;/p&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'introduction-post'; return false&quot;&gt;&amp;lt; Introducción&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'dockercompose-post'; return false&quot;&gt;Instalación Docker-compose &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Documentation" /><category term="post" /><category term="general" /><summary type="html">Rocket.Chat dispone de tres imágenes oficiales, siendo la versión stable la que en principio vamos a utilizar. Para bajarse alguna de las imagénes, vamos a ejecutar lo siguiente: docker pull rocket.chat Demo de la descarga: Una vez bajada dicha imagen, en caso de querer ejecutar Rocket.Chat sobre systemd vamos a seguir los siguientes pasos: Primero creamos una red en Docker: docker network create rocketchat_default Después, creamos dos servicios: el primero será el servicio para Mongodb y el otro, el servicio de Rocket.Chat. mongo.service [Unit] Description=mongo Requires=docker.service After=docker.service [Service] EnvironmentFile=/etc/mongo &amp;lt;-- ficheros del servicio User=manuel Restart=always TimeoutStartSec=0 ExecStartPre=-/usr/bin/docker kill mongo ExecStartPre=-/usr/bin/docker rm mongo ExecStartPre=-/usr/bin/docker pull mongo:3.2 ExecStart=/usr/bin/docker run \ --name mongo \ -v /media/manuel/Datos1/PROYECTO/mongo:/data/db \ &amp;lt;-- ruta del volumen para Mongodb --net=rocketchat_default \ mongo:3.2 \ mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1 ExecStop=-/usr/bin/docker kill mongo ExecStop=-/usr/bin/docker rm mongo rocketchat.service [Unit] Description=rocketchat Requires=docker.service Requires=mongo.service After=docker.service After=mongo.service [Service] EnvironmentFile=/etc/rocketchat &amp;lt;-- ficheros del servicio User=manuel Restart=always TimeoutStartSec=0 ExecStartPre=-/usr/bin/docker kill rocketchat ExecStartPre=-/usr/bin/docker rm rocketchat ExecStartPre=-/usr/bin/docker pull rocketchat/rocket.chat:latest ExecStart=/usr/bin/docker run \ --name rocketchat \ -v /media/manuel/Datos1/PROYECTO/rocketchat:/app/uploads \ &amp;lt;-- donde subir ficheros -e MONGO_OPLOG_URL=mongodb://mongo:27017/local \ -e MONGO_URL=mongodb://mongo:27017/rocketchat \ -e ROOT_URL=https://sub.domain.xx \ --link mongo:mongo \ --net=rocketchat_default \ --expose 3000 \ rocketchat/rocket.chat:latest ExecStop=-/usr/bin/docker kill rocketchat ExecStop=-/usr/bin/docker rm rocketchat Creados ambos servicios, vamos a iniciar el servicio de Mongodb y creamos el siguiente contenedor Docker: docker run \ --name mongo-init-replica \ --link mongo:mongo \ --rm \ --net=rocketchat_default \ mongo:3.2 \ mongo mongo/rocketchat --eval &quot;rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'localhost:27017' } ]})&quot; Por último, vamos a iniciar el servicio de Rocket.Chat creado anteriormente: sudo systemctl start rocketchat.service Con esto, ya tendriamos nuestro servicio Rocket.Chat funcionando en una máquina Docker, pero funcionando desde systemd. Como última aclaración, en caso de tener un proxy inverso, nos debemos asegurar que está añadido en la red creada anteriormente. Para ello, debemos añadir la siguiente línea en el archivo rocketchat.service: ExecStartPre=-/usr/bin/docker network connect rocketchat_default Nginx Ahora pasaremos a otro tipo de instalación. &amp;lt; Introducción Instalación Docker-compose &amp;gt;</summary></entry><entry><title type="html">Instalación mediante Docker-Compose</title><link href="/blog/dockercompose-post" rel="alternate" type="text/html" title="Instalación mediante Docker-Compose" /><published>2021-04-15T00:00:00+02:00</published><updated>2021-04-15T00:00:00+02:00</updated><id>/blog/dockercompose-post</id><content type="html" xml:base="/blog/dockercompose-post">&lt;p&gt;Es posible, como hemos visto en clase, que se puede automatizar el proceso de creación de 
contenedores mediante un fichero &lt;em&gt;.yml&lt;/em&gt;. Por lo tanto, vamos a crear ese fichero con el siguiente
contenido:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'

services:
  rocketchat:
    image: registry.rocket.chat/rocketchat/rocket.chat:latest
    command: &amp;gt;
      bash -c
        &quot;for i in `seq 1 30`; do
          node main.js &amp;amp;&amp;amp;
          s=$$? &amp;amp;&amp;amp; break || s=$$?;
          echo \&quot;Tried $$i times. Waiting 5 secs...\&quot;;
          sleep 5;
        done; (exit $$s)&quot;
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://rocketchat:3000
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - MAIL_URL=smtp://smtp.email
    depends_on:
      - mongo
    ports:
      - 3000:3000

  mongo:
    image: mongo:4.0
    restart: unless-stopped
    volumes:
     - ./data/db:/data/db
     #- ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 

  mongo-init-replica:
    image: mongo:4.0
    command: &amp;gt;
      bash -c
        &quot;for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \&quot;
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'mongo:27017' } ]})\&quot; &amp;amp;&amp;amp;
          s=$$? &amp;amp;&amp;amp; break || s=$$?;
          echo \&quot;Tried $$i times. Waiting 5 secs...\&quot;;
          sleep 5;
        done; (exit $$s)&quot;
    depends_on:
      - mongo

#  mongo-init-replica:
#    image: mongo:4.0
#    command: 'mongo mongo/rocketchat --eval &quot;rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})&quot;'
#    depends_on:
#      - mongo


# hubot, the popular chatbot (add the bot user first and change the password before starting this image)
  hubot:
    image: rocketchat/hubot-rocketchat:v0.1.4
    environment:
      - ROCKETCHAT_URL=rocketchat:3000
      - ROCKETCHAT_ROOM=
      - ROCKETCHAT_USER=rocket.cat
      - ROCKETCHAT_PASSWORD=password
      - LISTEN_ON_ALL_PUBLIC=true
      - BOT_NAME=bot
      - RESPOND_TO_EDITED=true
      - RESPOND_TO_DM=true
# you can add more scripts as you'd like here, they need to be installable by npm
      - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
# this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier
    ports:
      - 3001:8080

  smtp:
    image: namshi/smtp
    environment:
      - RELAY_DOMAINS=:example.com:example.de

  nginx:
    image: nginx:latest
    volumes:
      - ./certs/host.example.com.crt:/etc/nginx/cert.crt
      - ./certs/host.example.com.key:/etc/nginx/cert.key
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8066:443

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Este fichero dockercompose realizará lo siguiente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;De primeras, inicia el servicio de &lt;em&gt;mongo&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Después inicia otro servicio llamado &lt;em&gt;mongo-init-replica&lt;/em&gt;, que esperará a que el servicio de mongo
esté listo, para conectarse a él e inicializarlo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Por último, inicia el servicio de Rocket.Chat, que al igual que el anterior servicio, esperará
a que &lt;em&gt;mongo&lt;/em&gt; esté listo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;También iniciará el servicio de smtp y el servicio de nginx que funcionará como proxy inverso.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para iniciar el escenario que hemos montado, vamos a ejecutar el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/despliegue-compose.gif&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Podemos ver las características del despliegue:
&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/docker-ps.gif&quot; /&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y ya tendríamos nuestra aplicación de Rocket.Chat funcionando.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En caso de querer manejar logs y demás, podemos descomentar las líneas del montaje de volúmenes.&lt;/p&gt;

&lt;p&gt;También es posible instalar Rocket.Chat en alta disponibilidad con un replicaset de &lt;em&gt;Mongodb&lt;/em&gt; 
como backend, pero esta es una opción a tener en cuenta más adelante.&lt;/p&gt;

&lt;p&gt;Una vez ya desplegado, veremos la IP de acceso de la máquina deploy_rocketchat_1 (en mi caso, 
172.18.0.3) y accederemos mediante el navegador:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/acceso-docker.gif&quot; /&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Y una vez en la página, podemos iniciar sesión de manera normal:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ManuelLoraRoman/proyectorocketchat.github.io/main/assets/images/inicio-sesion.gif&quot; /&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Todo este funcionamiento es si no hemos añadido el proxy inverso a nuestro docker-compose, pero en caso 
de haberlo añadido, accederemos a la página mediante el server_name de nginx y el puerto correspondiente.&lt;/p&gt;

&lt;p&gt;A continuación, vamos a pasar al apartado de conexión de usuario.&lt;/p&gt;

&lt;div&gt;

 &lt;span style=&quot;margin-right:980px;text-align:left;color:blue&quot; onclick=&quot;document.location.href = 'systemd-post'; return false&quot;&gt;&amp;lt; Instalación mediante systemd&lt;/span&gt;

 &lt;span style=&quot;margin-left:0px;float:right;color:blue&quot; onclick=&quot;document.location.href = 'user-post'; return false&quot;&gt;Conexiones y usuarios &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Docker" /><category term="dockercompose" /><category term="Rocket.Chat" /><category term="Installation" /><summary type="html">Es posible, como hemos visto en clase, que se puede automatizar el proceso de creación de contenedores mediante un fichero .yml. Por lo tanto, vamos a crear ese fichero con el siguiente contenido: version: '2' services: rocketchat: image: registry.rocket.chat/rocketchat/rocket.chat:latest command: &amp;gt; bash -c &quot;for i in `seq 1 30`; do node main.js &amp;amp;&amp;amp; s=$$? &amp;amp;&amp;amp; break || s=$$?; echo \&quot;Tried $$i times. Waiting 5 secs...\&quot;; sleep 5; done; (exit $$s)&quot; restart: unless-stopped volumes: - ./uploads:/app/uploads environment: - PORT=3000 - ROOT_URL=http://rocketchat:3000 - MONGO_URL=mongodb://mongo:27017/rocketchat - MONGO_OPLOG_URL=mongodb://mongo:27017/local - MAIL_URL=smtp://smtp.email depends_on: - mongo ports: - 3000:3000 mongo: image: mongo:4.0 restart: unless-stopped volumes: - ./data/db:/data/db #- ./data/dump:/dump command: mongod --smallfiles --oplogSize 128 --replSet rs0 mongo-init-replica: image: mongo:4.0 command: &amp;gt; bash -c &quot;for i in `seq 1 30`; do mongo mongo/rocketchat --eval \&quot; rs.initiate({ _id: 'rs0', members: [ { _id: 0, host: 'mongo:27017' } ]})\&quot; &amp;amp;&amp;amp; s=$$? &amp;amp;&amp;amp; break || s=$$?; echo \&quot;Tried $$i times. Waiting 5 secs...\&quot;; sleep 5; done; (exit $$s)&quot; depends_on: - mongo # mongo-init-replica: # image: mongo:4.0 # command: 'mongo mongo/rocketchat --eval &quot;rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})&quot;' # depends_on: # - mongo # hubot, the popular chatbot (add the bot user first and change the password before starting this image) hubot: image: rocketchat/hubot-rocketchat:v0.1.4 environment: - ROCKETCHAT_URL=rocketchat:3000 - ROCKETCHAT_ROOM= - ROCKETCHAT_USER=rocket.cat - ROCKETCHAT_PASSWORD=password - LISTEN_ON_ALL_PUBLIC=true - BOT_NAME=bot - RESPOND_TO_EDITED=true - RESPOND_TO_DM=true # you can add more scripts as you'd like here, they need to be installable by npm - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics # this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier ports: - 3001:8080 smtp: image: namshi/smtp environment: - RELAY_DOMAINS=:example.com:example.de nginx: image: nginx:latest volumes: - ./certs/host.example.com.crt:/etc/nginx/cert.crt - ./certs/host.example.com.key:/etc/nginx/cert.key - ./nginx/nginx.conf:/etc/nginx/nginx.conf ports: - 8066:443 Este fichero dockercompose realizará lo siguiente: De primeras, inicia el servicio de mongo. Después inicia otro servicio llamado mongo-init-replica, que esperará a que el servicio de mongo esté listo, para conectarse a él e inicializarlo. Por último, inicia el servicio de Rocket.Chat, que al igual que el anterior servicio, esperará a que mongo esté listo. También iniciará el servicio de smtp y el servicio de nginx que funcionará como proxy inverso. Para iniciar el escenario que hemos montado, vamos a ejecutar el siguiente comando: docker-compose up -d Podemos ver las características del despliegue: Y ya tendríamos nuestra aplicación de Rocket.Chat funcionando. En caso de querer manejar logs y demás, podemos descomentar las líneas del montaje de volúmenes. También es posible instalar Rocket.Chat en alta disponibilidad con un replicaset de Mongodb como backend, pero esta es una opción a tener en cuenta más adelante. Una vez ya desplegado, veremos la IP de acceso de la máquina deploy_rocketchat_1 (en mi caso, 172.18.0.3) y accederemos mediante el navegador: Y una vez en la página, podemos iniciar sesión de manera normal: Todo este funcionamiento es si no hemos añadido el proxy inverso a nuestro docker-compose, pero en caso de haberlo añadido, accederemos a la página mediante el server_name de nginx y el puerto correspondiente. A continuación, vamos a pasar al apartado de conexión de usuario. &amp;lt; Instalación mediante systemd Conexiones y usuarios &amp;gt;</summary></entry><entry><title type="html">Introducción a Rocket.Chat</title><link href="/blog/introduction-post" rel="alternate" type="text/html" title="Introducción a Rocket.Chat" /><published>2021-04-12T00:00:00+02:00</published><updated>2021-04-12T00:00:00+02:00</updated><id>/blog/introduction-post</id><content type="html" xml:base="/blog/introduction-post">&lt;p&gt;Antes de empezar a hablar sobre Rocket.chat, voy a explicar un poco el porqué utilizar Rocket.Chat 
con contenedores.&lt;/p&gt;

&lt;p&gt;En principio, los contenedores y las máquinas virtuales difieren en varios aspectos pero el principal
es que los contenedores ofrecen una forma de virtualizar un sistema operativo haciendo que múltiples 
cargas de trabajo puedan correr en una sencilla instancia de dicho sistema operativo, mientras que 
las máquinas virtuales todo el hardware es virtualizado para correr en diferentes sistemas operativos.&lt;/p&gt;

&lt;p&gt;Esto hace que los contenedores sean más ágiles, veloces y que tengan mayor portabilidad. Además de los 
siguientes beneficios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Requieren menos tiempo para iniciarse&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mejor distribución de recursos&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Acceso directo al hardware&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Menos redundante&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aparte son más sencillos de orquestar, con diferentes sistemas como Kubernetes, Rancher, 
Openshift o Docker-compose.&lt;/p&gt;

&lt;p&gt;Otra de las recomendaciones es usar un sistema de monitorización, si es posible el estándar 
Prometheus + Grafana.&lt;/p&gt;

&lt;h2 id=&quot;requerimientos&quot;&gt;Requerimientos&lt;/h2&gt;

&lt;p&gt;Los requerimientos han sido ya tratados en dicha sección en el pre-proyecto. Puedes visualizarlo 
&lt;a href=&quot;https://github.com/ManuelLoraRoman/ApuntesASIR/blob/master/Proyecto.md&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lo único a comentar sería con que voy a trabajar que sería:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Lenovo Legion Y720&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Debian 10&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;16 GB RAM&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;8 procesadores con 4 cores cada uno&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1 TB disco duro&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;instalaciones&quot;&gt;Instalaciones&lt;/h2&gt;

&lt;p&gt;Aunque hablaremos más adelante de los tipos de instalaciones que hay, vamos a
exponer de manera breve los diferentes tipos que hay:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ubuntu + Snap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install snapd

sudo snap install rocketchat-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Una vez hecho esto, tendríamos desplegado en nuestro &lt;em&gt;localhost&lt;/em&gt; Rocket.chat y podremos configurarlo.&lt;/p&gt;

&lt;p&gt;Snap actualiza de manera automática cuando hay una nueva version de Rocket.Chat y suele ser una opción más segura ya que 
tanto Rocket.Chat y sus dependencias están separadas del sistema.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Despliegue en PaaS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Las recomendadas serían &lt;em&gt;SandStorm&lt;/em&gt; y &lt;em&gt;Cloudron&lt;/em&gt; pero prácticamente se puede desplegar en cualquier entorno,
desde &lt;em&gt;Amazon Web Services&lt;/em&gt; hasta en &lt;em&gt;Digital Ocean&lt;/em&gt; entre otros.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Herramientas de automatización&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.rocket.chat/installation/automation-tools/ansible&quot;&gt;Ansible&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.rocket.chat/installation/automation-tools/openshift&quot;&gt;OpenShift&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.rocket.chat/installation/automation-tools/helm-chart&quot;&gt;Kubernetes + Helm&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.rocket.chat/installation/automation-tools/vagrant&quot;&gt;Vagrant&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Instalación manual&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;CentOS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Debian&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;RedHat&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ubuntu&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prácticamente, es posible instalar el servidor de Rocket.Chat en diferentes entornos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Contenedores Docker&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hemos hablado anteriormente de esta opción y además, vamos a explicar detalladamente esta manera
de instalación más adelante.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Métodos no oficiales&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;FreeBSD&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Windows 10 / Windows Server&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Kali&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;OpenSUSE&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los métodos anteriormente comentados en los otros puntos, están respaldados por Rocket.Chat.&lt;/p&gt;

&lt;p&gt;Pero es posible instalar el servidor en alguno de estos sistemas, pero no se puede asegurar que funcionen o que se actualicen las funcionalidades.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Comentados todos los métodos de instalación, vamos a desarrollar nuestro ejercicio con contenedores Docker. Se ajustan
bien a nuestro escenario y disponen de la portabilidad que buscamos.&lt;/p&gt;

&lt;p&gt;Ahora pasaremos al siguiente punto, que es la documentación.&lt;/p&gt;

&lt;div align=&quot;right&quot;&gt;

 &lt;span style=&quot;color:blue&quot; onclick=&quot;document.location.href = 'systemd-post'; return false&quot;&gt;Instalación via systemd &amp;gt;&lt;/span&gt;

&lt;/div&gt;</content><author><name></name></author><category term="Introduction" /><category term="Rocket.Chat" /><category term="Communication" /><summary type="html">Antes de empezar a hablar sobre Rocket.chat, voy a explicar un poco el porqué utilizar Rocket.Chat con contenedores. En principio, los contenedores y las máquinas virtuales difieren en varios aspectos pero el principal es que los contenedores ofrecen una forma de virtualizar un sistema operativo haciendo que múltiples cargas de trabajo puedan correr en una sencilla instancia de dicho sistema operativo, mientras que las máquinas virtuales todo el hardware es virtualizado para correr en diferentes sistemas operativos. Esto hace que los contenedores sean más ágiles, veloces y que tengan mayor portabilidad. Además de los siguientes beneficios: Requieren menos tiempo para iniciarse Mejor distribución de recursos Acceso directo al hardware Menos redundante Aparte son más sencillos de orquestar, con diferentes sistemas como Kubernetes, Rancher, Openshift o Docker-compose. Otra de las recomendaciones es usar un sistema de monitorización, si es posible el estándar Prometheus + Grafana. Requerimientos Los requerimientos han sido ya tratados en dicha sección en el pre-proyecto. Puedes visualizarlo aquí. Lo único a comentar sería con que voy a trabajar que sería: Lenovo Legion Y720 Debian 10 16 GB RAM Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz 8 procesadores con 4 cores cada uno 1 TB disco duro Instalaciones Aunque hablaremos más adelante de los tipos de instalaciones que hay, vamos a exponer de manera breve los diferentes tipos que hay: Ubuntu + Snap sudo apt-get install snapd sudo snap install rocketchat-server Una vez hecho esto, tendríamos desplegado en nuestro localhost Rocket.chat y podremos configurarlo. Snap actualiza de manera automática cuando hay una nueva version de Rocket.Chat y suele ser una opción más segura ya que tanto Rocket.Chat y sus dependencias están separadas del sistema. Despliegue en PaaS Las recomendadas serían SandStorm y Cloudron pero prácticamente se puede desplegar en cualquier entorno, desde Amazon Web Services hasta en Digital Ocean entre otros. Herramientas de automatización Ansible OpenShift Kubernetes + Helm Vagrant Instalación manual CentOS Debian RedHat Ubuntu Prácticamente, es posible instalar el servidor de Rocket.Chat en diferentes entornos. Contenedores Docker Hemos hablado anteriormente de esta opción y además, vamos a explicar detalladamente esta manera de instalación más adelante. Métodos no oficiales FreeBSD Windows 10 / Windows Server Kali OpenSUSE Los métodos anteriormente comentados en los otros puntos, están respaldados por Rocket.Chat. Pero es posible instalar el servidor en alguno de estos sistemas, pero no se puede asegurar que funcionen o que se actualicen las funcionalidades. Comentados todos los métodos de instalación, vamos a desarrollar nuestro ejercicio con contenedores Docker. Se ajustan bien a nuestro escenario y disponen de la portabilidad que buscamos. Ahora pasaremos al siguiente punto, que es la documentación. Instalación via systemd &amp;gt;</summary></entry></feed>